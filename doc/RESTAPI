For all requests: view=json -> returns data (or response) as json structure, view=xml or without view parameter  -> as xml

resources :gateway

GET        /gateway/:id     return gateway & it's connections
example: 127.0.0.1:8080/gateway/7dc235d0-c938-4b66-8f8c-c9037c7eace7?view=json

POST     /gateway     create gateway or replace if exist
        id = {mandatory, <<"id">>, list},
        name = {mandatory, <<"name">>, list},
        rps = {mandatory, <<"rps">>, integer}
example:
127.0.0.1:8080/gateway
request body: id=7dc235d0-c938-4b66-8f8c-c9037c7eace7&name=test_gtw&rps=200

PUT     /gateway/:id     update gateway, exclude connections (not implemented)

DELETE     /gateway/:id     destroy gateway
127.0.0.1:8080/gateway/7dc235d0-c938-4b66-8f8c-c9037c7eace7

-------------------------------

resources connection

POST    /gateway/:id/connection     create connection or replace if exist

    id         = {mandatory, <<"id">>, integer},
    type         = {mandatory, <<"type">>, integer},
    addr         = {mandatory, <<"addr">>, list},     # dotted integers -> 127.0.0.1
    port         = {mandatory, <<"port">>, integer},
    sys_id         = {mandatory, <<"sys_id">>, list},
    pass         = {mandatory, <<"pass">>, list},
    sys_type     = {mandatory, <<"sys_type">>, list},
    addr_ton     = {mandatory, <<"addr_ton">>, integer},
    addr_npi     = {mandatory, <<"addr_npi">>, integer},
    addr_range    = {mandatory, <<"addr_range">>, list}

example:
127.0.0.1:8080/gateway/7dc235d0-c938-4b66-8f8c-c9037c7eace7/connection
request body: id=0&type=1&addr=127.0.0.1&port=8001&sys_id=smppclient1&pass=password&sys_type=smppclient1&addr_ton=0&addr_npi=0&addr_range=

PUT     /gateway/:id/connection/:id     update connection (not implemented)

DELETE     /gateway/:id/connection/:id     destroy connection
example:
127.0.0.1:8080/gateway/7dc235d0-c938-4b66-8f8c-c9037c7eace7/connection/0

------------------------------------------
resources :provider

GET     /provider/:id return provider
example: 127.0.0.1:8080/provider/0a89542c-5270-11e1-bf27-001d0947ec73

POST     /provider     create provider or replace if exist

    id = {mandatory, <<"id">>, list},
    gateway = {mandatory, <<"gateway">>, list},
    bulkGateway = {mandatory, <<"bulk_gateway">>, list},
    receiptsSupported = {optional, <<"receipts_supported">>, boolean} # in case of absence of value, it will become false

example:
127.0.0.1:8080/provider
request body: id=0a89542c-5270-11e1-bf27-001d0947ec73&gateway=7dc235d0-c938-4b66-8f8c-c9037c7eace7&bulk_gateway=7dc235d0-c938-4b66-8f8c-c9037c7eace7&receipts_supported

PUT     /provider/:id     update provider (not implemented)

DELETE     /provider/:id     destroy provider
example: 127.0.0.1:8080/provider/0a89542c-5270-11e1-bf27-001d0947ec73

-----------------------------------------
resources :networks

GET     /network/:id     return network_id
example: 127.0.0.1:8080/networks/20a009a-5270-11e1-b961-001d0947ec73

POST     /network     create network or replace if exist

    id = {mandatory, <<"id">>, list},
    countryCode = {mandatory, <<"country_code">>, list},    # integer
    numbersLen = {mandatory, <<"numbers_len">>, integer},
    prefixes = {mandatory, <<"prefixes">>, list},         # comma-delemited integers
    providerId = {mandatory, <<"provider_id">>, list}

example:
127.0.0.1:8080/network
request body: id=920a009a-5270-11e1-b961-001d0947ec73&country_code=375&numbers_len=12&prefixes=29,33,44&provider_id=0a89542c-5270-11e1-bf27-001d0947ec73

PUT     /network/id     update network (not implemented yet)

DELETE     /network/id     destroy network
example: 127.0.0.1:8080/network/920a009a-5270-11e1-b961-001d0947ec73

----------------------------------------
resources :customers

GET        /customer/:id     returt customer & it's users
example: 127.0.0.1:8080/customer/test-sys-id

POST     /customer         create new customer (or replace if customer already exist with empty list of users )
    id = {mandatory, <<"id">>, list},
    uuid = {mandatory, <<"uuid">>, list},
    priority = {mandatory, <<"priority">>, integer},
    rps = {optional, <<"rps">>, integer},
    allowedSources = {mandatory, <<"allowed_sources">>, list},
    defaultSource = {optional, <<"default_source">>, list},
    networks = {mandatory, <<"networks">>, list},         # comma-delimited list of networks uuid
    defaultProviderId = {optional, <<"default_provider_id">>, list},
    receiptsAllowed = {optional, <<"receipts_allowed">>, boolean},
    noRetry = {optional, <<"no_retry">>, boolean},
    defaultValidity = {mandatory, <<"default_validity">>, list},
    maxValidity = {mandatory, <<"max_validity">>, integer}

allowedSources ->
    separated by a semicolon (source1;source2) sources where sorce:
        comma-delimited list of: addr(string), ton(integer), npi(integer). Example: allowed_sources=375296662323,0,0

defaultValidity ->
	The validity_period parameter indicates the SMSC expiration time, after which the message
should be discarded if not delivered to the destination. It can be defined in absolute time format
or relative time format. The encoding of absolute and relative time format is specified in Section
7.1.1 of SMPP v3.4. Example: 000003000000000R - 3 days relative to SMSC time.

example:
127.0.0.1:8080/customer
request body: id=test-sys-id&uuid=feda5822-5271-11e1-bd27-001d0947ec73&priority=1&rps=300&allowed_sources=375296662323,0,0&default_source=375296662323,0,0&networks=920a009a-5270-11e1-b961-001d0947ec73&receipts_allowed=true&no_retry=true&default_validity=&max_validity=259200

PUT     /customer/:id     update customer, exclude customer user (not implemented yet)

DELETE  /customer/:id     destroy customer
example: 127.0.0.1:8080/customer/test-sys-id

------------------------------------------------------
resources :customer user

POST    /customer/:id/user/:id         create customer user or replace if user already exist

    id             = {mandatory, <<"id">>, list},
    pswd            = {mandatory, <<"pswd">>, list},
    permitted_smpp_types     = {mandatory, <<"permitted_smpp_types">>, list} %% comma-delimites list -> "transmitter,receiver,transceiver"

example:
127.0.0.1:8080/customer/test-sys-id/user
request body: id=user&pswd=password&permitted_smpp_types=transmitter,receiver,transceiver

PUT        /customer/:id/user/:id         update customer user (not implemented yet)

DELETE     /customer/:id/user/:id delete customer user
127.0.0.1:8080/customer/test-sys-id/user/user

-------------------------------------------------------
resource :inaddr_subscription

POST /inaddr_subscription         create link

addr=375296667788 :: string() #mandatory
ton=0 :: integer() #mandatory
npi=0 :: integer() #mandatory
customer_id=uuid :: string() #mandatory

example
127.0.0.1:8080/inaddr_subscription
request body: addr=375296667788&ton=0&npi=0&customer_id=uuid
returns: <result>ok</result>

DELETE /inaddr_subscription/?addr=375296667788&ton=0&npi=0    destroy link
returns: <result>ok</result>

GET /inaddr_subscription?addr=375296667788&ton=0&npi=0     returns link if exist
returns in case of no link: <error>addr_not_used</error>
normal return: <ok>uuid</ok>